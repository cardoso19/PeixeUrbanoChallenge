//
//  CatalogViewController.swift
//  PeixeUrbano
//
//  Created by Matheus Cardoso kuhn on 20/07/19.
//  Copyright (c) 2019 MDT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogDisplayLogic: class {
    func displayCatalog(viewModel: Catalog.CatalogModel.ViewModel)
    func displayImage(viewModel: Catalog.ImageModel.ViewModel)
    func displayLoader(viewModel: Catalog.Loader.ViewModel)
    func displayError(viewModel: Error)
}

class CatalogViewController: UIViewController {
    
    //MARK: - Visual Components
    private weak var tableViewContent: UITableView!
    
    // MARK: - Variables
    private var interactor: CatalogBusinessLogic?
    private var router: (NSObjectProtocol & CatalogRoutingLogic & CatalogDataPassing)?
    private var dealCellIdentifier: String = "Deal"
    private var deals: [Catalog.CatalogModel.ViewModel.DealModel] = []
    private var loader: UIActivityIndicatorView = UIActivityIndicatorView(style: .gray)
    
    // MARK: - Object Life Cycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    convenience init(type: CatalogType) {
        self.init(nibName: nil, bundle: nil)
        tabBarItem.title = type.title
        tabBarItem.image = type.tabBarIcon
        interactor?.selectCatalogType(request: Catalog.TypeModel.Request(type: type))
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = CatalogInteractor()
        let presenter = CatalogPresenter()
        let router = CatalogRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        prepareComponents()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        doDataRequest()
    }
    
    //MARK: - Config Components
    private func prepareComponents() {
        createVisualComponents()
        setDelegatesnAndDataSources()
        registerCells()
        layoutTableView()
        layoutLoader()
    }
    
    private func createVisualComponents() {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(tableView)
        tableViewContent = tableView
    }
    
    private func setDelegatesnAndDataSources() {
        tableViewContent.dataSource = self
    }
    
    private func registerCells() {
        tableViewContent.register(DealTableViewCell.self, forCellReuseIdentifier: dealCellIdentifier)
    }
    
    private func layoutTableView() {
        tableViewContent.rowHeight = -1
        tableViewContent.separatorStyle = .none
        let views: [String: Any] = ["tableView": tableViewContent!]
        var allConstraints: [NSLayoutConstraint] = []
        let horizontalConstraint = NSLayoutConstraint.constraints(
            withVisualFormat: "H:|-0-[tableView]-0-|",
            metrics: nil,
            views: views)
        allConstraints += horizontalConstraint
        let verticalConstraint = NSLayoutConstraint.constraints(
            withVisualFormat: "V:|-[tableView]-|",
            metrics: nil,
            views: views)
        allConstraints += verticalConstraint
        NSLayoutConstraint.activate(allConstraints)
    }
    
    private func layoutLoader() {
        loader.center = view.center
        loader.alpha = 0.0
        loader.stopAnimating()
        view.addSubview(loader)
    }
    
    //MARK: - Request
    func doDataRequest() {
        interactor?.doCatalogRequest()
    }
}

// MARK: - CatalogDisplayLogic
extension CatalogViewController: CatalogDisplayLogic {
    
    func displayCatalog(viewModel: Catalog.CatalogModel.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            self?.deals = viewModel.deals
            self?.tableViewContent.reloadData()
        }
    }
    
    func displayImage(viewModel: Catalog.ImageModel.ViewModel) {
        DispatchQueue.main.async {
            if let cell = self.tableViewContent.cellForRow(at: viewModel.indexPath) as? DealTableViewCell {
                cell.imageViewDeal.image = viewModel.image
            }
        }
    }
    
    func displayLoader(viewModel: Catalog.Loader.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            if viewModel.isLoaderVisible {
                self?.loader.startAnimating()
                UIView.animate(withDuration: 0.15) {
                    self?.tableViewContent.alpha = 0
                }
                UIView.animate(withDuration: 0.25) {
                    self?.loader.alpha = 1.0
                }
            } else {
                self?.loader.stopAnimating()
                UIView.animate(withDuration: 0.15) {
                    self?.loader.alpha = 0.0
                }
                UIView.animate(withDuration: 0.25) {
                    self?.tableViewContent.alpha = 1.0
                }
            }
        }
    }
    
    func displayError(viewModel: Error) {
        debugPrint(viewModel)
    }
}

//MARK: - UITableViewDataSource
extension CatalogViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return deals.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard
            let cell = tableView.dequeueReusableCell(withIdentifier: dealCellIdentifier) as? DealTableViewCell
            else {
                fatalError("Error loading cell of type: \(DealTableViewCell.description())")
        }

        let deal = deals[indexPath.row]
        cell.selectionStyle = .none
        cell.labelPartnerName.text = deal.partnerName
        cell.labelDealTitle.text = deal.title
        cell.labelDealPriceDescription.text = deal.priceDescription
        cell.labelDealPriceSymbol.text = deal.priceSymbol
        cell.labelDealPrice.text = deal.price
        cell.imageViewCutted.isHidden = !deal.isImageCuttedVisible
        interactor?.doDownloadImage(request: Catalog.ImageModel.Request(url: deal.imageUrl,
                                                                        indexPath: indexPath))
        return cell
    }
}
