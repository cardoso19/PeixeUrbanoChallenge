//
//  CatalogViewController.swift
//  PeixeUrbano
//
//  Created by Matheus Cardoso kuhn on 20/07/19.
//  Copyright (c) 2019 MDT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogDisplayLogic: class {
    func displaySomething(viewModel: Catalog.Something.ViewModel)
}

class CatalogViewController: UIViewController {
    
    //MARK: - Visual Components
    private weak var tableViewContent: UITableView!
    
    // MARK: - Variables
    private var interactor: CatalogBusinessLogic?
    private var router: (NSObjectProtocol & CatalogRoutingLogic & CatalogDataPassing)?
    private var dealCellIdentifier: String = "Deal"
    private var deals: [String] = []
    
    // MARK: - Object Life Cycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = CatalogInteractor()
        let presenter = CatalogPresenter()
        let router = CatalogRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        prepareComponents()
    }
    
    //MARK: - Config Components
    private func prepareComponents() {
        createVisualComponents()
        setDelegatesnAndDataSources()
        registerCells()
        layoutTableView()
    }
    
    private func createVisualComponents() {
        let tableView = UITableView()
        view.addSubview(tableView)
        tableViewContent = tableView
    }
    
    private func setDelegatesnAndDataSources() {
        tableViewContent.dataSource = self
    }
    
    private func registerCells() {
        tableViewContent.register(DealTableViewCell.self, forCellReuseIdentifier: dealCellIdentifier)
    }
    
    private func layoutTableView() {
        tableViewContent.separatorStyle = .none
    }
    
    // MARK: - Do something
    func doSomething() {
        let request = Catalog.Something.Request()
        interactor?.doSomething(request: request)
    }
}

// MARK: - CatalogDisplayLogic
extension CatalogViewController: CatalogDisplayLogic {
    
    func displaySomething(viewModel: Catalog.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}

//MARK: - UITableViewDataSource
extension CatalogViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return deals.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard
            let cell = tableView.dequeueReusableCell(withIdentifier: dealCellIdentifier) as? DealTableViewCell
            else {
                fatalError("Error loading cell of type: \(DealTableViewCell.description())")
        }
        cell.selectionStyle = .none
        return cell
    }
}
